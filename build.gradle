buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
        maven { url 'https://jitpack.io' }
    }
}
plugins {
    id "org.springframework.boot" version "2.7.11"
    id "io.spring.dependency-management" version "1.0.15.RELEASE"
    id("org.jetbrains.kotlin.jvm") version "1.6.21"
    id("org.jetbrains.kotlin.plugin.spring") version "1.6.21"
    id "com.github.shalousun.smart-doc" version "2.6.8"
}

group = "com.example"
version = ""
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        allowInsecureProtocol = true
        url "http://repo.spring.io/milestone"
    }
    maven { url 'https://jitpack.io' }
}
jar {
    manifest {
        attributes 'Main-Class': 'com.example.uploadfileserver.UploadFileServerApplication'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

//extra["springCloudVersion"] = "2021.0.4"
//extra["awsSpringVersion"]= "2.4.2"
dependencies {
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
//    implementation("org.springframework.boot:spring-boot-starter-security")
//    implementation("de.codecentric:spring-boot-admin-starter-client:2.7.7")
//    implementation("de.codecentric:spring-boot-admin-starter-server:2.7.5")
//    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk
    implementation('com.amazonaws:aws-java-sdk:1.12.429')
    implementation('com.google.code.gson:gson:2.10.1')
    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation('com.squareup.okio:okio:3.2.0')
    implementation("com.github.peihua8858:KotlinUtil:1.0.1-beta1")
    implementation("com.github.peihua8858:GsonAdapter-java:1.0.2")
//    implementation('mysql:mysql-connector-java:8.0.33')
//    implementation('com.h2database:h2:2.1.214')
//    implementation('com.baomidou:mybatis-plus-boot-starter:3.5.3.1')
//    implementation('com.baomidou:mybatis-plus:3.5.3.1')
    //阿里云短信群发sdk
    implementation('com.aliyun:aliyun-java-sdk-core:4.6.3')
    implementation('com.aliyun:dysmsapi20170525:2.0.23')
    implementation('commons-io:commons-io:2.11.0')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1')
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.1'
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.3')
    testImplementation 'com.github.shalousun:smart-doc:2.6.8'
//    implementation("org.mitre.dsmiley.httpproxy:smiley-http-proxy-servlet:1.12.1")
//    implementation("com.github.mkopylec:charon-spring-webmvc:4.10.0")
//    implementation ("org.springframework.cloud:spring-cloud-starter-aws")
//    implementation ("org.springframework.cloud:spring-cloud-starter-aws-messaging")
//    implementation ("org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config")
}

//dependencyManagement {
//    imports {
//        mavenBom( "io.awspring.cloud:spring-cloud-aws-dependencies:${property("awsSpringVersion")}")
//        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
//    }
//}
smartdoc {
    configFile = file("src/main/resources/smart-doc.json");
    // exclude example
    // exclude artifact
    exclude 'org.springframework.boot:spring-boot-starter-tomcat';
    // exclude artifact use pattern
    exclude 'org.springframework.boot.*';
    // You can use the include configuration to let the plugin automatically load the specified source.
    // include example
//    include 'org.springframework.boot:spring-boot-starter-tomcat'
}
//tasks.withType<KotlinCompile> {
//    kotlinOptions {
//        freeCompilerArgs = listOf("-Xjsr305=strict")
//        jvmTarget = "11"
//    }
//}
//
//tasks.withType<Test> {
//    useJUnitPlatform()
//}


task bootCopyLibs(type:Copy){
    from configurations.compileClasspath
    into "$buildDir/libs/lib"
}
task bootClearLibs(type:Delete){
    delete "$buildDir/libs/lib"
}
bootJar {
    baseName = 'MonitorService'
    mainClass = 'com.example.uploadfileserver.UploadFileServerApplication'
    excludes =["*.jar"]
    dependsOn bootClearLibs
    dependsOn bootCopyLibs
    manifest {
        attributes "Manifest-Version": 1.0,
                'Class-Path':configurations.compileClasspath.files.collect{"lib/$it.name"}.join(" ")
    }
}